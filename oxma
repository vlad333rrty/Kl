#!/usr/bin/env bash

loc=$(pwd)
path_to_sources="$loc"/src/main/java
path_to_kalina_compiler="$path_to_sources"/kalina/compiler
path_to_lexer=$path_to_kalina_compiler/syntax/lexer

run_lexer () {
  flex --outfile="$1"/lex.yy.c "$1"/"$2"
  gcc -o "$1"/a.out "$1"/lex.yy.c "$path_to_lexer"/logger/logger.c
  chmod +x "$1"/a.out
  "$1"/a.out "$3" "$4"
  result=$?
  rm "$1"/a.out "$1"/lex.yy.c
}

ERROR_STATE=255

OUTPUT_FILE_NAME=output.kl
OUTPUT_FILE_PATH="$loc/data/$OUTPUT_FILE_NAME"

# run program lexer
run_lexer "$path_to_lexer" lexer.l "$1" "$OUTPUT_FILE_PATH" result
if [ "$result" == "$ERROR_STATE"  ]
then
  echo "An error occurred during lexical analyses, exit code: $result"
  exit $result
else
  echo "Lexical analyses completed successfully. Lexer returned with exit code $result"
fi


token_generator_path="$path_to_lexer"/gen
file_utils_path=$path_to_kalina_compiler/utils
run_token_generator() {
  javac "$token_generator_path"/TokenTagGenerator.java "$file_utils_path"/FileUtils.java
  java -cp "$path_to_sources" kalina.compiler.syntax.lexer.gen.TokenTagGenerator "$1"
  rm "$token_generator_path"/TokenTagGenerator.class "$file_utils_path"/FileUtils.class
}

# run program token generator
run_token_generator "$path_to_lexer"/TokenTag.h

./gradlew run --args="$OUTPUT_FILE_PATH"
